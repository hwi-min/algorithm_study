# 스택 (stack)은 기본적인 자료구조 중 하나로, 컴퓨터 프로그램을 작성할 때 자주 이용되는 개념이다.
# 스택은 자료를 넣는 (push) 입구와 자료를 뽑는 (pop) 입구가 같아 제일 나중에 들어간 자료가 제일 먼저 나오는 특성을 가지고 있다.

# 1부터 n까지의 수를 스택에 넣었다가 뽑아 늘어놓음으로써, 하나의 수열을 만들 수 있다.
# 이때, 스택에 push하는 순서는 반드시 오름차순을 지키도록 한다고 하자.
# 임의의 수열이 주어졌을 때 스택을 이용해 그 수열을 만들 수 있는지 없는지,
# 있다면 어떤 순서로 push와 pop 연산을 수행해야 하는지를 알아낼 수 있다. 이를 계산하는 프로그램을 작성하라.

# 입력
# 첫 줄에 n (1 ≤ n ≤ 100,000)이 주어진다.
# 둘째 줄부터 n개의 줄에는 수열을 이루는 1이상 n이하의 정수가 하나씩 순서대로 주어진다.
# 물론 같은 정수가 두 번 나오는 일은 없다.

# 출력
# 입력된 수열을 만들기 위해 필요한 연산을 한 줄에 한 개씩 출력한다.
# push연산은 +로, pop 연산은 -로 표현하도록 한다. 불가능한 경우 NO를 출력한다.
# (입력된 수열이 8 7 6 5 4 3 2 1 이라면 + + + + + + + + - - - - - - - - 출력)


stack = []  # 1부터 n까지의 수를 넣고 빼기 위한 스택(리스트)
num = 0  # 1부터 n까지의 수를 표현하기 위한 변수
res = []  # 정답을 저장하기 위한 리스트
possible = True  # 입력된 수열을 만들 수 있는지 판단

stack.append(num)  # 1보다 작은 수(더미)를 stack에 넣고 시작
num += 1  # num을 1로 변경

n = int(input())

for _ in range(n):
    sequence = int(input())

    # 스택의 top이 수열의 다음 숫자와 같아질 때까지 push
    while stack[-1] < sequence:  # 수열의 첫 숫자가 1이어도 1보다 작은 숫자가 이미 stack에 있기 때문에 가능
        stack.append(num)
        num += 1
        res.append('+')
    
    # 스택의 top이 수열의 다음 숫자와 같다면 pop
    if stack[-1] == sequence:  
        stack.pop()
        res.append('-')
    # 다르다면 top보다 밑에 있다는 뜻이므로 pop이 불가하여 수열을 만들 수 없음
    else: possible = False


# 수열을 만들 수 없다면 NO 출력, 있다면 정답 출력
if not possible: print('NO')
else:
    for result in res:
        print(result)